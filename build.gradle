/*
 * Copyright (c) 2014, Francis Galiegue (fgaliegue@gmail.com)
 *
 * This software is dual-licensed under:
 *
 * - the Lesser General Public License (LGPL) version 3.0 or, at your option, any
 *   later version;
 * - the Apache Software License (ASL) version 2.0.
 *
 * The text of this file and of both licenses is available at the root of this
 * project or, if you have the jar distribution, in directory META-INF/, under
 * the names LGPL-3.0.txt and ASL-2.0.txt respectively.
 *
 * Direct link to the sources:
 *
 * - LGPL 3.0: https://www.gnu.org/licenses/lgpl-3.0.txt
 * - ASL 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt
 */

/*
buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'http://repo.springsource.org/plugins-release';
        }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.2.0'
        classpath(group: 'org.springframework.build.gradle', name: 'propdeps-plugin', version: '0.0.7');
    }
};
*/

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'eclipse'
    id 'biz.aQute.bnd.builder' version '6.4.0' // 4.2.0
    id 'net.ltgt.errorprone' version '3.0.1' // 0.8.1
}

// apply(from: 'project.gradle')

group = 'com.github.java-json-tools'
version = '1.13'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8 // defaults to sourceCompatibility

dependencies {
    compileOnly(group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2')
    implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0')
    implementation(group: 'com.github.java-json-tools', name: 'msg-simple', version: '1.2')

    implementation(group: 'com.github.java-json-tools', name: 'jackson-coreutils', version: '2.0')

    testImplementation(group: 'org.testng', name: 'testng', version: '7.1.0') {
        exclude(group: 'junit', module: 'junit')
        exclude(group: 'org.beanshell', module: 'bsh')
        exclude(group: 'org.yaml', module: 'snakeyaml')
    }
    testImplementation(group: 'org.mockito', name: 'mockito-core', version: '2.28.2')
    // FIXME: update to 3.x once we're off of Java 7
    testImplementation(group: 'org.assertj', name: 'assertj-core', version: '2.9.1')
    testImplementation(group: 'com.google.guava', name: 'guava', version: '28.2-android')
}

def forRelease = !version.endsWith('-SNAPSHOT')

/*
 * Repositories to use
 */
repositories {
    mavenCentral()
    if (!forRelease) {
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    // Allow staging references for last pre-release testing.
    if (project.properties.containsKey('sonatypeUsername')) {
        maven {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            credentials {
                username = project.properties['sonatypeUsername']
                password = project.properties['sonatypePassword']
            }
        }
    }
}

/*
 * Add errorprone checking.
 */
dependencies {
    errorprone('com.google.errorprone:error_prone_core:2.18.0')
    errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
}

/*
 * Necessary! Otherwise TestNG will not be used...
 *
 */
tasks.withType(Test).configureEach {
    useTestNG() {
        useDefaultListeners = true
    }
}

/*
 * Necessary to generate the source and javadoc jars
 */
java {
    withSourcesJar()
    withJavadocJar()
}

/*
 * Lint all the things!
 */
// gradle.projectsEvaluated needed?
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:all' << '-Xlint:-serial' << '-Werror'
}
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xwerror', '-quiet')
}

/*
 * Javadoc: we need to tell where the overview.html is, it will not pick it up
 * automatically...
 */

//javadoc {
//    options.overview = 'src/main/java/overview.html'
//}

/*
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}
*/

/*
tasks.named('pom').configure {
    doLast {
        pom {}.writeTo(projectDir + '/pom.xml')
    }
}
*/
// https://stackoverflow.com/a/74205283
project.afterEvaluate {
tasks.register("copyPomToRoot") {
    def publication = publishing.publications.maven
    def generatePom = tasks.named("generatePomFileFor${publication.name.capitalize()}Publication")
    dependsOn(generatePom)
    def output = rootProject.file("${publication.artifactId}-${publication.version}.pom")
    outputs.file(output)
    doLast { output.bytes = generatePom.get().destination.bytes }
}
}
/*
 * SIGNING
 */

project.ext {
    scmUrl = sprintf('git@github.com:java-json-tools/%s.git', name)
    projectURL = sprintf('https://github.com/java-json-tools/%s', name)
    sonatypeStaging = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    sonatypeSnapshots = 'https://oss.sonatype.org/content/repositories/snapshots/'
};

tasks.register('checkSigningRequirements') {
    doLast {
        def requiredProperties = [ 'sonatypeUsername', 'sonatypePassword' ]
        def noDice = false
        requiredProperties.each {
            if (project.properties[it] == null) {
                noDice = true
                System.err.printf('property \'%s\' is not defined!\n', it)
            }
        }
        if (noDice)
            throw new IllegalStateException('missing required properties for ' +
                'upload')
    }
}

publishing {publications {maven(MavenPublication) {from(components.java) } } }

// tasks.withType(MavenPublish).configureEach { dependsOn(checkSigningRequirements) }
publishing {
    repositories {
        // beforeDeployment {
        //     MavenDeployment deployment -> signing.signPom(deployment)
        // }

        /*
        repository(url: "${sonatypeStaging}") {
            authentication(
                userName: project.properties['sonatypeUsername'],
                password: project.properties['sonatypePassword']
            )
        }

        snapshotRepository(url: "${sonatypeSnapshots}") {
            authentication(
                userName: project.properties['sonatypeUsername'],
                password: project.properties['sonatypePassword']
            )
        }
        */
        // mavenDeployer {}
    }
}

/*
 * Configure pom.xml on install, uploadArchives
 */
// [
//     install.repositories.mavenInstaller,
//     uploadArchives.repositories.mavenDeployer
// ]*.pom*.whenConfigured { pom ->
//     pom.project {
//         name project.name
//         packaging 'jar'
//         description project.ext.description
//         url project.ext.projectURL

//         scm {
//             url scmUrl
//             connection scmUrl
//             developerConnection 'scm:git:' + scmUrl
//         }

//         licenses {
//             license {
//                 name 'Lesser General Public License, version 3 or greater'
//                 url 'http://www.gnu.org/licenses/lgpl.html'
//                 distribution 'repo'
//             }
//             license {
//                 name 'Apache Software License, version 2.0'
//                 url 'http://www.apache.org/licenses/LICENSE-2.0'
//                 distribution 'repo'
//             }
//         }

//         developers {
//             developer {
//                 id 'huggsboson'
//                 name 'John Huffaker'
//                 email 'jhuffaker+java-json-tools@gmail.com'
//             }
//         }
//     }
// }

signing {
    required { forRelease && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives;
}
